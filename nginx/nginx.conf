user nginx;
worker_processes  1;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;
events {
  worker_connections 1024;
}
http {
  include /etc/nginx/mime.types;
  # additional mime types
  types {
    audio/wave wav;
  }
  default_type application/octet-stream;
  log_format main '$remote_addr - $remote_user [$time_local]'
                  '"$request" $status $body_bytes_sent'
                  '"$http_referer" "$http_user_agent"'
                  '"$http_x_forwarded_for"';
  access_log /var/log/nginx/access.log main;
  upstream backend {
    server backend:8000;
  }
  server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name localhost;
    charset utf-8;
    root /usr/share/nginx/html;
    index index.html;
    # nginx location matching rules:
    # = uri percisely match a string, no appending string allowed
    # ^~ uri starts with a string and other matching will be ignored if this rule is found first
    # ~ uri matchs a regex (case sensitive)
    # ~* uri matchs a regex (case insensitive)
    # / general match, all uri eventually match this if no other matches are found
    location / {
      # checks static content matches 'uri' or 'uri/' under root, if not found goto @rewrite
      try_files $uri $uri/ @rewrites;
    }
    location @rewrites {
      # rewrite [regex] [replacement] [flag];
      # common flags: break and last
      # break: stop executing cmds 'only in' ngx_http_rewrite_module
      # last: stop executing cmds 'only in' ngx_http_rewrite_module, and search the replacement immediately
      rewrite ^(.*)$ /index.html last;
    }
    location ^~ /static/ {
      autoindex on;
      alias /usr/share/nginx/html/static/;
    }
    location ~ \.(mp3|mp4|wav) {
      sendfile on;
      # sendfile_max_chunk 1m;
      # request example: /media/w_1.wav -> /usr/share/nginx/html/static/media/w_1.wav
      root /usr/share/nginx/html/static/;
    }
    location ~ ^/api {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://backend;
    }
    location ~ ^/admin {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://backend;
    }
  }
}